extract obj_props
extract import "utils.spwn"

PIXEL_OBJ_ID = 472
PIXEL_OBJ_WIDTH = 1.4

_error = (message) {
	throw "[ERROR]: {}".fmt([message])
}

type @colour
impl @colour {

	to_hsv: (self) {
		let r = self.r / 255
		let g = self.g / 255
		let b = self.b / 255

		cmax = $.max(r, $.max(g, b))
		cmin = $.min(r, $.min(g, b))
		diff = cmax - cmin

		let h = -1
		let s = -1
		let v = cmax * 100

		if cmax == cmin {
			h = 0
		}
		else if cmax == r {
			h = (60 * ((g - b) / diff) + 360) % 360;
		}
		else if cmax == g {
			h = (60 * ((b - r) / diff) + 120) % 360;
		}
		else if cmax == b {
			h = (60 * ((r - g) / diff) + 240) % 360;
		}

		if cmax == 0 {
			s = 0
		}
		else {
			s = (diff / cmax) * 100;
		}

		return [h, s, v]
	},

	get_hsv_shift: (self, other: @colour) {
		let v1 = self.to_hsv()
		let v2 = other.to_hsv()

		s_offset = (v1[1] - v2[1]) / 100
		v_offset = (v1[2] - v2[2]) / 100
		h_offset = 360 - (v1[0] - v2[0])

		return [h_offset, v_offset, s_offset]
	},

	new: (r: @number, g: @number, b: @number, a: @number = 255) {
		return @colour::{
			r, g, b, a: (a / 255)
		}
	}
}


//Moved into separate classes since it's just a bit neater
type @bmp_fhdr
impl @bmp_fhdr {
	SIZE: 14,

	new: (data: @data) {
		let data = data

		let file_header = data.read(@bmp_fhdr::SIZE)
		
		bfType = file_header.read(2).raw().bytes_to_str()
		bfSize = file_header.read(4).raw().bytes_to_int()
		
		//Skips reserved
		file_header.move(4)

		bfOffBits = file_header.read(4).raw().bytes_to_int()

		return @bmp_fhdr::{
			size: @bmp_fhdr::SIZE,
			bfType,
			bfSize,
			reserved1: 0,
			reserved2: 0,
			bfOffBits,
		}
	}
}

// https://upload.wikimedia.org/wikipedia/commons/c/c4/BMPfileFormat.png
// https://github.com/python-pillow/Pillow/blob/master/src/PIL/BmpImagePlugin.py
// ^^^ very helpful :)
type @bmp_ihdr
impl @bmp_ihdr {
	
	BIT2MODE: @enum::new([
		["P", "P;1"],
		["P", "P;4"],
		["P", "P;8"],
		["RGB", "BGR;15"],
		["RGB", "BGR"],
		["RGB", "BGRX"]
	], [1, 4, 8, 16, 24, 32]),

	SUPPORTED: @enum::new([
		[
			[16711680, 65280, 255, 0],
			[16711680, 65280, 255, 4278190080],
			[255, 65280, 16711680, 4278190080],
			[0, 0, 0, 0],
			[4278190080, 16711680, 65280, 0],
		],	
		[[16711680, 65280, 255]],
		[[63488, 2016, 31], [31744, 992, 31]],
	], [32, 24, 16]),

	MASK_MODES: {
		// -> _<bitCount>_<SUPPORTED-arrayIndex>
		_32_0: "BGRX",
		_32_1: "XBGR",
		_32_2: "RGBA",
		_32_3: "BGRA",
		_32_4: "BGRA",
		_24_0: "BGR",	
		_16_0: "BGR;16",
		_16_1: "BGR;15",
	},

	COMPRESSIONS: @enum::new(["RAW", "RLE8", "RLE4", "BITFIELDS"]),

	new: (data: @data) {
		let data = data

		size = data.read(4).raw().bytes_to_int()

		let info_header = data.read(size - 4)

		//Oops >.<
		let biWidth = null; let biHeight = null; let biPlanes = null; let biBitCount = null; let biCompression = null; let biPalettePadding = null;
		let biYFlip = null; let biDirection = null; let biImageSize = null; let biPixPerMeter = null; let biColors = null; let biDpi = [];

		//IBM OS/2 Bitmap v1
		if size == 12 {
			biWidth = info_header.read(2).raw().bytes_to_int()
			biHeight = info_header.read(2).raw().bytes_to_int()
			biPlanes = info_header.read(2).raw().bytes_to_int()
			biBitCount = info_header.read(2).raw().bytes_to_int()
			biCompression = @bmp::COMPRESSIONS.."RAW"
			biPalettePadding = 3

		}
		//Windows Bitmap v2 to v5
		else if [40, 64, 108, 124] has size {
			biYFlip = (info_header.raw()[7] == 255)
			biDirection = 1 if biYFlip else -1

			biWidth = info_header.read(4).raw().bytes_to_int()
			biHeight = info_header.read(4).raw().bytes_to_int()
			biHeight = biHeight if !biYFlip else 2 ** 32 - biHeight

			biPlanes = info_header.read(2).raw().bytes_to_int()
			biBitCount = info_header.read(2).raw().bytes_to_int()
			biCompression = info_header.read(4).raw().bytes_to_int()
			biImageSize = info_header.read(4).raw().bytes_to_int()
			biPixPerMeter = [
				info_header.read(4).raw().bytes_to_int(),
				info_header.read(4).raw().bytes_to_int(),
			]

			biColors = info_header.read(4).raw().bytes_to_int()
			biPalettePadding = 4

			for m in biPixPerMeter {
				biDpi.push($.floor(m / 39.3701 + 0.5))
			}

		}
		else {
			_error("Error parsing BMP! (unknown header type {})".fmt([size]))
		}

		biColors = biColors if biColors != 0 else 1.s_left(biBitCount)
		
		let masks = {}
		let biRGBMask = []
		let biRGBAMask = []

		if @bmp_ihdr::COMPRESSIONS.."BITFIELDS" == biCompression {
			_m = ["r_mask", "g_mask", "b_mask", "a_mask"]
			if size >= 52 {
				info_header.move(4)
				for i in 0.._m.length {
					masks.set(_m[i], info_header.read(4).raw().bytes_to_int())
				}
			} 
			else {
				masks["a_mask"] = 0
				
				//Leave out a_mask
				for m in _m[0:3] {
					masks.set(m, data.read(4).raw().bytes_to_int())
				}
			}

			biRGBAMask = [
				masks["r_mask"],
				masks["g_mask"],
				masks["b_mask"],
				masks["a_mask"],
			]
			biRGBMask = [
				masks["r_mask"],
				masks["g_mask"],
				masks["b_mask"],
			]
		}

		mask_key = (bit, ind) {
			return "_{}_{}".fmt([bit, ind])
		}

		modes = @bmp_ihdr::BIT2MODE..biBitCount
		let biMode = modes[0]
		let raw_mode = modes[1]
		
		if @bmp_ihdr::COMPRESSIONS.."BITFIELDS" == biCompression {
			if @bmp_ihdr::SUPPORTED has biBitCount {
				if biBitCount == 32 && ((@bmp_ihdr::SUPPORTED..biBitCount) has biRGBAMask) {
					raw_mode = @bmp_ihdr::MASK_MODES[mask_key(biBitCount, (@bmp_ihdr::SUPPORTED..biBitCount).index(biRGBAMask))]
					biMode = "RGBA" if raw_mode has "A" else biMode
				}
				else if [24, 16] has biBitCount && ((@bmp_ihdr::SUPPORTED..biBitCount) has biRGBMask) {
					raw_mode = @bmp_ihdr::MASK_MODES[mask_key(biBitCount, (@bmp_ihdr::SUPPORTED..biBitCount).index(biRGBMask))]
				}
				else {
					_error("Error parsing BMP! (uknown bitfields layout)")
				}
			}
			else {
				_error("Error parsing BMP! (uknown bitfields layout)")
			}
		}
		else if @bmp_ihdr::COMPRESSIONS.."RAW" == biCompression {
			// According to PIL this branch checks a variable called "header" to see if it is `22`
			// but "header" is never provided as an argument to the func so I dont think this branch ever executes
			// https://github.com/python-pillow/Pillow/blob/fb0aad5abdab9027cf8f02082ca4dab921692b79/src/PIL/BmpImagePlugin.py#L207
		}
		else if @bmp_ihdr::COMPRESSIONS.."RLE8" != biCompression && @bmp_ihdr::COMPRESSIONS.."RLE4" != biCompression {
			_error("Error parsing BMP! (uknown compression type {})".fmt([biCompression]))
		}

		biTile = [
			$.floor((biWidth * biBitCount + 31).s_right(3) / 4) * 4,
		]

		return @bmp_fhdr::{
			size,
			biYFlip,
			biDirection,
			biWidth,
			biHeight,
			biPlanes,
			biBitCount,
			biCompression,
			biImageSize,
			biPixPerMeter,
			biColors,
			biPalettePadding,
			biDpi,
			biRGBMask,
			biRGBAMask,
			biMode,
			biTile
		}
	}
}

type @bmp_palette
impl @bmp_palette {

	get_colour: (self, index: @number) {
		return self.colours[index]
	},

	new: (data: [@number], mode: @string) {
		let colours = []

		len = (data.length / 4)

		for i in 0..len {
			//Skip the 4th index since it's usually reserved
			//It's in BGR order
			colours.push(@colour::new(data[i*4+2], data[i*4+1], data[i*4]))
		}

		return @bmp_palette::{
			colours,
		}
	}
}

rle_decompress = (data) {
	let decomp = []
	let data = data.raw()
	for i in 0..2..data.length {
		decomp.push([].fill(data[i], data[i+1]))
	}
	return @data::new(decomp.flatten())
}

type @bmp_csec
impl @bmp_csec {

	at: (self, x: @number, y: @number) {
		if self.mode == "P" {
			index = self.read[y][x]
			return self.palette.get_colour(index)
		}
		else {
			//Monochrome non indexed
			if self.mode == "G" {
				col = self.read[y][x]
				//Either black or while
				return @colour::new(col*255, col*255, col*255)
			}

			return self.read[y][x]
		}
	},

	new: (file_header, info_header, data: @data) {
		let data = data
		let palette = null

		let mode = info_header.biMode

		if info_header.biMode == "P" {
			if info_header.biColors < 0 || info_header.biColors > 65536 {
				_error("Error parsing BMP! (unsupported palette size {})".fmt([info_header.biColors]))
			}
			else {
				let greyscale = true

				padding = info_header.biPalettePadding
				palette = data.read(padding * info_header.biColors).raw()
				indicies = [0, 255] if info_header.biColors == 2 else (0..info_header.biColors) as @array

				for i in 0..indicies.length {
					val = indicies[i]

					rgb = palette[i * padding : i * padding + 3]

					if rgb.sum() != (val.b_and(255)) * 3 {
						greyscale = false
					}
				}

				if greyscale {
					mode = "G" if info_header.biColors == 2 else raw_mode
				}
				else {
					palette = @bmp_palette::new(palette, "BGRX" if padding == 4 else "BGR")
				}
			}
		}

		pix_data_len = info_header.biTile[0] * info_header.biHeight
		
		//Move back to the start
		data.move(-data.p)
		//Use the defined offset to get to the data because it is possible there is a gap between the colour table and pixel data
		data.move(file_header.bfOffBits)

		let pix_data = data.read(pix_data_len)

		if @bmp_ihdr::COMPRESSIONS.."RLE4" == info_header.biCompression || @bmp_ihdr::COMPRESSIONS.."RLE8" == info_header.biCompression {
			pix_data = rle_decompress(pix_data)
		}

		let read = []

		let padding = $.floor(4 - ((info_header.biWidth * info_header.biBitCount / 8) % 4))
		padding = padding if padding != 4 else 0

		//Im sure theres a much better way of doing this lol
		while !pix_data.is_eof() {
			let bytes = pix_data.read(info_header.biTile[0] - padding).raw()
			let b = []
			
			//1 bit monochrome / indexed BMP
			if info_header.biBitCount == 1 {
				bytes = bytes.map((b) => b.to_bin()).flatten()

				//1 bit is 1 pixel
				for i in 0..bytes.length {
					if i >= info_header.biWidth {
						break
					}
					b.push(bytes[i])
				}
			}
			//4 bit indexed BMP
			else if info_header.biBitCount == 4 {
				bytes = bytes.map((b) => b.to_bin()).flatten()

				//1 nibble is 1 pixel
				for i in 0..4..bytes.length {
					if i / 4 >= info_header.biWidth {
						break
					}
					//to_bin will return in big endian format so we need to specify big endian when converting it back to an int
					b.push(bytes[i:i+4].binary_to_int())
				}
			}
			//8 bit indexed BMP
			else if info_header.biBitCount == 8 {
				bytes = bytes.map((b) => b.to_bin())

				//Custom enumerate function :)
				enumerate(bytes, (i, byte, end) {
					if i >= info_header.biWidth {
						end()
					}
					b.push(byte.binary_to_int())
				})

			}
			//16 bit true colour BMP (RGB555[1] / RGB565)
			else if info_header.biBitCount == 16 {
				bytes = @data::new(bytes.map((b) => b.to_bin()).flatten())

				to_8_bit = (val) {
					return (val * 255) / 31
				}

				for i in 0..(bytes.length / 16) {
					blue = to_8_bit(bytes.read(5).raw().binary_to_int())
					let green = null
					let red = null

					//Indicates RGB 565
					if info_header.biRGBAMask.length > 0 || info_header.biRGBMask.length > 0 {
						//RGB 565 allocated 6 bits to green, instead of 5 and leaving 1 unused
						green = to_8_bit(bytes.read(6).raw().binary_to_int())
						red = to_8_bit(bytes.read(5).raw().binary_to_int())
					}
					//RGB 555[1]
					else {
						green = to_8_bit(bytes.read(5).raw().binary_to_int())
						red = to_8_bit(bytes.read(5).raw().binary_to_int())
						bytes.move(1)
					}

					b.push(@colour::new(red, green, blue))
				}
			}
			//24 bit true colour BMP
			else if info_header.biBitCount == 24 {
				for i in 0..3..bytes.length {
					//Convert into colour instances - format is BRG
					b.push(@colour::new(bytes[i:i+3][2], bytes[i:i+3][1], bytes[i:i+3][0]))
				}
			}
			//32 bit true colour BMP (RBG / RGBA)
			else if info_header.biBitCount == 32 {
				for i in 0..4..bytes.length {
					//Convert into colour instances - format is BRG
					b.push(@colour::new(bytes[i:i+4][2], bytes[i:i+4][1], bytes[i:i+4][0], a=bytes[i:i+4][3]))
				}
			}

			read.push(b)
			pix_data.move(padding)
		}

		//Flip the bitmap so the first element is the first (top left) pixel
		if info_header.biDirection == 1 {
			read = read.reverse()
		}

		return @bmp_csec::{
			palette,
			read,
			mode,
		}	
	}
}

type @bmp
impl @bmp {
	HEADER: "BM",

	_parse: (self) {
		file_header = @bmp_fhdr::new(self.raw)
		self.raw.move(file_header.size)

		self.fhdr = file_header

		if @bmp::HEADER != file_header.bfType {
			_error("Invalid BMP file! (incorrect file header \"{}\")".fmt(file_header.bfType))
		}

		info_header = @bmp_ihdr::new(self.raw)
		self.raw.move(info_header.size)

		self.ihdr = info_header

		self.col = @bmp_csec::new(self.fhdr, self.ihdr, self.raw)

		self.raw = null
	},

	pixel_at: (self, x: @number, y: @number) {
		return self.col.at(x, y)
	},

	new: (data: @data) {

		return @bmp::{
			fhdr: null,
			ihdr: null,
			col: null,
			raw: data
		}
	}
}


//Reads and parses the bmp file
parse_bmp = (
	#[desc("Path to the file")]
	file,
) {
    let data = @data::new($.readfile(file, "bin"))

	let bmp = @bmp::new(data)
	bmp._parse()

	return bmp
}



bmp_to_objects = (
	#[desc("The BMP object")]
	bmp,
	#[desc("Starting x offset for the pixels. Default is 5 blocks (from 0,0)")]
	start_x = 150,
	#[desc("Starting y offset for the pixels. Default is 50 blocks (from 0,0)")]
	start_y = 1500,

	#[desc("Starting group for the objects. Default is next free group")]
	start_id_group = ?g,
	#[desc("Enables/Disables adding groups to all the pixels. Default is false")]
	add_groups = false,
	#[desc("
	The function that generates the group value. Two object are provided as arguments:\n
	-[0] {x, y, raw_x, raw_y} -> positions of the pixels. `x` and `y` are different to `raw_x` and `raw_y` if `pixel_density` has be changed.\n
	-[1] {bmp, start_x, start_y, start_id_group, pixel_scale, pixel_density, current_group} -> extra data for whatever code runs within in the macro\n
	The function MUST return: `@number` or `@group`
	")]
	group_factory = null,

	#[desc("Starting colour group for the objects. Default is next free group")]
	start_col_group = ?c,
	#[desc("Instead of using 1 unique colour for every pixel, use 1 colour and hue shift to get the right colour. Default is false")]
	use_hue_shift = false,
	
	#[desc("The size of the individual pixels. Default is 1")]
	pixel_scale = 1,
	#[desc("The number of pixels placed per pixel in the image (must be a square number). Default is 1")]
	pixel_density = 1,

	#[desc("Enables/Disables glow on the pixels. Default is false")]
	show_glow = false,
) {
	//Validation for the arguments
	if start_x <= 0 {
		_error("start_x must be greater than 0!")
	}
	if start_y <= 0 {
		_error("start_y must be greater than 0!")
	}

	if hue_offset < 0 || hue_offset > 180 {
		_error("hue_offset must be between 0 and 180!")
	}

	if pixel_scale < 0.1 || pixel_scale > 4 {
		_error("pixel_scale must be between 0.1 and 4!")
	}

	//If the square root is not the same as the floored sqaure root it means it wasnt a square number
	if $.sqrt(pixel_density) != $.floor($.sqrt(pixel_density)) {
		_error("pixel_density must be a square number! (4 -> 2 times large, 9 -> 3 times as large, 16...)")
	}

	let col_id = @inc_group::new(start_col_group)
	let col_group = col_id.group()

	let group_id = @inc_group::new(start_id_group)

	//To pass the group id as a number to group_factory it needs to not be "next free"
	if group_factory != null && group_id.is_next_free {
		_error("group_factory cannot be used when start_id_group is ?g!")
	}

	//Default/Starting values if using hue shift
	let pixel_col = bmp.pixel_at(0, 0)
	-> col_group.set(pixel_col.r, pixel_col.g, pixel_col.b, pixel_col.a, duration=0)

	let hsv_string = ""

	//Default group factory - just increments the group every time it's called
	let group_factory = (_, __) {
		id = group_id.group()
		group_id = group_id.next()
		return id
	} if group_factory == null else group_factory

	let size = $.sqrt(pixel_density)

	for x in 0..bmp.ihdr.biWidth * size {
		for y in 0..bmp.ihdr.biHeight * size {
			//Need the x and y values mapped to the original image sizes so I can get the colours correctly
			raw_x = x.map(0, bmp.ihdr.biWidth * size, 0, bmp.ihdr.biWidth)
			raw_y = y.map(0, bmp.ihdr.biHeight * size, 0, bmp.ihdr.biHeight)

			if !use_hue_shift {
				pixel_col = bmp.pixel_at(raw_x, raw_y)

				col_id = col_id.next()
				col_group = col_id.group()

				-> col_group.set(pixel_col.r, pixel_col.g, pixel_col.b, pixel_col.a, duration=0)
			}
			else {
				shift = pixel_col.get_hsv_shift(bmp.pixel_at(raw_x, raw_y))
				h_shift = shift[0]
				v_shift = shift[1]
				s_shift = shift[2]

				hsv_string = "{}a{}a{}a1a1".fmt([h_shift, v_shift, s_shift])
			}
	
			nx = (x * PIXEL_OBJ_WIDTH * pixel_scale) + start_x
			ny = (y * PIXEL_OBJ_WIDTH * pixel_scale) + start_y

			//Get the group
			fac_group = group_factory({x, y, raw_x, raw_y}, {
					bmp, start_x, start_y, start_id_group, pixel_scale, pixel_density, current_group: group_id._as_num()
				}) as @group
			
			//Update with new group
			group_id = @inc_group::new(fac_group)

			object = obj {
				OBJ_ID: PIXEL_OBJ_ID,
				X: nx,
				Y: ny,
				COLOR: col_group,
				HVS: hsv_string if use_hue_shift else "",
				HVS_ENABLED: use_hue_shift,
				GROUPS: fac_group if add_groups else 0g,
				DONT_FADE: true,
				DONT_ENTER: true,
				GLOW_DISABLED: !show_glow,
				SCALING: pixel_scale,
			}	

			$.add(object)
		}
	}
}

return {
	parse_bmp,
	bmp_to_objects,
}